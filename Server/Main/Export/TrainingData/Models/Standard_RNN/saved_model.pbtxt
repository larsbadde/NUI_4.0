saved_model_schema_version: 1
meta_graphs {
  meta_info_def {
    stripped_op_list {
      op {
        name: "Add"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_STRING
            }
          }
        }
      }
      op {
        name: "ApplyAdam"
        input_arg {
          name: "var"
          type_attr: "T"
          is_ref: true
        }
        input_arg {
          name: "m"
          type_attr: "T"
          is_ref: true
        }
        input_arg {
          name: "v"
          type_attr: "T"
          is_ref: true
        }
        input_arg {
          name: "beta1_power"
          type_attr: "T"
        }
        input_arg {
          name: "beta2_power"
          type_attr: "T"
        }
        input_arg {
          name: "lr"
          type_attr: "T"
        }
        input_arg {
          name: "beta1"
          type_attr: "T"
        }
        input_arg {
          name: "beta2"
          type_attr: "T"
        }
        input_arg {
          name: "epsilon"
          type_attr: "T"
        }
        input_arg {
          name: "grad"
          type_attr: "T"
        }
        output_arg {
          name: "out"
          type_attr: "T"
          is_ref: true
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT64
              type: DT_INT32
              type: DT_UINT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_HALF
            }
          }
        }
        attr {
          name: "use_locking"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "use_nesterov"
          type: "bool"
          default_value {
            b: false
          }
        }
      }
      op {
        name: "ArgMax"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "dimension"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "output_type"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT64
              type: DT_INT32
              type: DT_UINT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_HALF
            }
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        attr {
          name: "output_type"
          type: "type"
          default_value {
            type: DT_INT64
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Assign"
        input_arg {
          name: "ref"
          type_attr: "T"
          is_ref: true
        }
        input_arg {
          name: "value"
          type_attr: "T"
        }
        output_arg {
          name: "output_ref"
          type_attr: "T"
          is_ref: true
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "validate_shape"
          type: "bool"
          default_value {
            b: true
          }
        }
        attr {
          name: "use_locking"
          type: "bool"
          default_value {
            b: true
          }
        }
        allows_uninitialized_input: true
      }
      op {
        name: "BiasAdd"
        input_arg {
          name: "value"
          type_attr: "T"
        }
        input_arg {
          name: "bias"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT64
              type: DT_INT32
              type: DT_UINT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_HALF
            }
          }
        }
        attr {
          name: "data_format"
          type: "string"
          default_value {
            s: "NHWC"
          }
          allowed_values {
            list {
              s: "NHWC"
              s: "NCHW"
            }
          }
        }
      }
      op {
        name: "BiasAddGrad"
        input_arg {
          name: "out_backprop"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT64
              type: DT_INT32
              type: DT_UINT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_HALF
            }
          }
        }
        attr {
          name: "data_format"
          type: "string"
          default_value {
            s: "NHWC"
          }
          allowed_values {
            list {
              s: "NHWC"
              s: "NCHW"
            }
          }
        }
      }
      op {
        name: "Cast"
        input_arg {
          name: "x"
          type_attr: "SrcT"
        }
        output_arg {
          name: "y"
          type_attr: "DstT"
        }
        attr {
          name: "SrcT"
          type: "type"
        }
        attr {
          name: "DstT"
          type: "type"
        }
      }
      op {
        name: "ConcatOffset"
        input_arg {
          name: "concat_dim"
          type: DT_INT32
        }
        input_arg {
          name: "shape"
          type: DT_INT32
          number_attr: "N"
        }
        output_arg {
          name: "offset"
          type: DT_INT32
          number_attr: "N"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 2
        }
      }
      op {
        name: "ConcatV2"
        input_arg {
          name: "values"
          type_attr: "T"
          number_attr: "N"
        }
        input_arg {
          name: "axis"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 2
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Const"
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "value"
          type: "tensor"
        }
        attr {
          name: "dtype"
          type: "type"
        }
      }
      op {
        name: "ControlTrigger"
      }
      op {
        name: "Enter"
        input_arg {
          name: "data"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "frame_name"
          type: "string"
        }
        attr {
          name: "is_constant"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "parallel_iterations"
          type: "int"
          default_value {
            i: 10
          }
        }
      }
      op {
        name: "Exit"
        input_arg {
          name: "data"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "ExpandDims"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "dim"
          type_attr: "Tdim"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tdim"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Fill"
        input_arg {
          name: "dims"
          type: DT_INT32
        }
        input_arg {
          name: "value"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "FloorDiv"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "FloorMod"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
      }
      op {
        name: "GreaterEqual"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type: DT_BOOL
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_UINT16
              type: DT_HALF
            }
          }
        }
      }
      op {
        name: "Identity"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "InTopK"
        input_arg {
          name: "predictions"
          type: DT_FLOAT
        }
        input_arg {
          name: "targets"
          type_attr: "T"
        }
        output_arg {
          name: "precision"
          type: DT_BOOL
        }
        attr {
          name: "k"
          type: "int"
        }
        attr {
          name: "T"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Less"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type: DT_BOOL
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_UINT16
              type: DT_HALF
            }
          }
        }
      }
      op {
        name: "LoopCond"
        input_arg {
          name: "input"
          type: DT_BOOL
        }
        output_arg {
          name: "output"
          type: DT_BOOL
        }
      }
      op {
        name: "MatMul"
        input_arg {
          name: "a"
          type_attr: "T"
        }
        input_arg {
          name: "b"
          type_attr: "T"
        }
        output_arg {
          name: "product"
          type_attr: "T"
        }
        attr {
          name: "transpose_a"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "transpose_b"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "Maximum"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        is_commutative: true
      }
      op {
        name: "Mean"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT64
              type: DT_INT32
              type: DT_UINT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_HALF
            }
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Merge"
        input_arg {
          name: "inputs"
          type_attr: "T"
          number_attr: "N"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        output_arg {
          name: "value_index"
          type: DT_INT32
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
      }
      op {
        name: "MergeV2Checkpoints"
        input_arg {
          name: "checkpoint_prefixes"
          type: DT_STRING
        }
        input_arg {
          name: "destination_prefix"
          type: DT_STRING
        }
        attr {
          name: "delete_old_dirs"
          type: "bool"
          default_value {
            b: true
          }
        }
        is_stateful: true
      }
      op {
        name: "Mul"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
        is_commutative: true
      }
      op {
        name: "NextIteration"
        input_arg {
          name: "data"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "NoOp"
      }
      op {
        name: "Pack"
        input_arg {
          name: "values"
          type_attr: "T"
          number_attr: "N"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "axis"
          type: "int"
          default_value {
            i: 0
          }
        }
      }
      op {
        name: "Placeholder"
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "shape"
          type: "shape"
          default_value {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      op {
        name: "PreventGradient"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "message"
          type: "string"
          default_value {
            s: ""
          }
        }
      }
      op {
        name: "Prod"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT64
              type: DT_INT32
              type: DT_UINT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_HALF
            }
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "RandomUniform"
        input_arg {
          name: "shape"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "seed"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "seed2"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "dtype"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        is_stateful: true
      }
      op {
        name: "Range"
        input_arg {
          name: "start"
          type_attr: "Tidx"
        }
        input_arg {
          name: "limit"
          type_attr: "Tidx"
        }
        input_arg {
          name: "delta"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "Tidx"
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "RealDiv"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "RefEnter"
        input_arg {
          name: "data"
          type_attr: "T"
          is_ref: true
        }
        output_arg {
          name: "output"
          type_attr: "T"
          is_ref: true
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "frame_name"
          type: "string"
        }
        attr {
          name: "is_constant"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "parallel_iterations"
          type: "int"
          default_value {
            i: 10
          }
        }
      }
      op {
        name: "Reshape"
        input_arg {
          name: "tensor"
          type_attr: "T"
        }
        input_arg {
          name: "shape"
          type_attr: "Tshape"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tshape"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "RestoreV2"
        input_arg {
          name: "prefix"
          type: DT_STRING
        }
        input_arg {
          name: "tensor_names"
          type: DT_STRING
        }
        input_arg {
          name: "shape_and_slices"
          type: DT_STRING
        }
        output_arg {
          name: "tensors"
          type_list_attr: "dtypes"
        }
        attr {
          name: "dtypes"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
        is_stateful: true
      }
      op {
        name: "SaveV2"
        input_arg {
          name: "prefix"
          type: DT_STRING
        }
        input_arg {
          name: "tensor_names"
          type: DT_STRING
        }
        input_arg {
          name: "shape_and_slices"
          type: DT_STRING
        }
        input_arg {
          name: "tensors"
          type_list_attr: "dtypes"
        }
        attr {
          name: "dtypes"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
        is_stateful: true
      }
      op {
        name: "Shape"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "out_type"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "out_type"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "ShapeN"
        input_arg {
          name: "input"
          type_attr: "T"
          number_attr: "N"
        }
        output_arg {
          name: "output"
          type_attr: "out_type"
          number_attr: "N"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "out_type"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "ShardedFilename"
        input_arg {
          name: "basename"
          type: DT_STRING
        }
        input_arg {
          name: "shard"
          type: DT_INT32
        }
        input_arg {
          name: "num_shards"
          type: DT_INT32
        }
        output_arg {
          name: "filename"
          type: DT_STRING
        }
      }
      op {
        name: "Slice"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "begin"
          type_attr: "Index"
        }
        input_arg {
          name: "size"
          type_attr: "Index"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Index"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "SparseSoftmaxCrossEntropyWithLogits"
        input_arg {
          name: "features"
          type_attr: "T"
        }
        input_arg {
          name: "labels"
          type_attr: "Tlabels"
        }
        output_arg {
          name: "loss"
          type_attr: "T"
        }
        output_arg {
          name: "backprop"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
        attr {
          name: "Tlabels"
          type: "type"
          default_value {
            type: DT_INT64
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Stack"
        output_arg {
          name: "handle"
          type: DT_STRING
          is_ref: true
        }
        attr {
          name: "elem_type"
          type: "type"
        }
        attr {
          name: "stack_name"
          type: "string"
          default_value {
            s: ""
          }
        }
        is_stateful: true
      }
      op {
        name: "StackPop"
        input_arg {
          name: "handle"
          type: DT_STRING
          is_ref: true
        }
        output_arg {
          name: "elem"
          type_attr: "elem_type"
        }
        attr {
          name: "elem_type"
          type: "type"
        }
      }
      op {
        name: "StackPush"
        input_arg {
          name: "handle"
          type: DT_STRING
          is_ref: true
        }
        input_arg {
          name: "elem"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "swap_memory"
          type: "bool"
          default_value {
            b: false
          }
        }
      }
      op {
        name: "StridedSlice"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "begin"
          type_attr: "Index"
        }
        input_arg {
          name: "end"
          type_attr: "Index"
        }
        input_arg {
          name: "strides"
          type_attr: "Index"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Index"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        attr {
          name: "begin_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "end_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "ellipsis_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "new_axis_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "shrink_axis_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
      }
      op {
        name: "StringJoin"
        input_arg {
          name: "inputs"
          type: DT_STRING
          number_attr: "N"
        }
        output_arg {
          name: "output"
          type: DT_STRING
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "separator"
          type: "string"
          default_value {
            s: ""
          }
        }
      }
      op {
        name: "Sub"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "Switch"
        input_arg {
          name: "data"
          type_attr: "T"
        }
        input_arg {
          name: "pred"
          type: DT_BOOL
        }
        output_arg {
          name: "output_false"
          type_attr: "T"
        }
        output_arg {
          name: "output_true"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "Tanh"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "TanhGrad"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "TensorArrayGatherV3"
        input_arg {
          name: "handle"
          type: DT_RESOURCE
        }
        input_arg {
          name: "indices"
          type: DT_INT32
        }
        input_arg {
          name: "flow_in"
          type: DT_FLOAT
        }
        output_arg {
          name: "value"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "element_shape"
          type: "shape"
          default_value {
            shape {
              unknown_rank: true
            }
          }
        }
        is_stateful: true
      }
      op {
        name: "TensorArrayReadV3"
        input_arg {
          name: "handle"
          type: DT_RESOURCE
        }
        input_arg {
          name: "index"
          type: DT_INT32
        }
        input_arg {
          name: "flow_in"
          type: DT_FLOAT
        }
        output_arg {
          name: "value"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        is_stateful: true
      }
      op {
        name: "TensorArrayScatterV3"
        input_arg {
          name: "handle"
          type: DT_RESOURCE
        }
        input_arg {
          name: "indices"
          type: DT_INT32
        }
        input_arg {
          name: "value"
          type_attr: "T"
        }
        input_arg {
          name: "flow_in"
          type: DT_FLOAT
        }
        output_arg {
          name: "flow_out"
          type: DT_FLOAT
        }
        attr {
          name: "T"
          type: "type"
        }
        is_stateful: true
      }
      op {
        name: "TensorArraySizeV3"
        input_arg {
          name: "handle"
          type: DT_RESOURCE
        }
        input_arg {
          name: "flow_in"
          type: DT_FLOAT
        }
        output_arg {
          name: "size"
          type: DT_INT32
        }
        is_stateful: true
      }
      op {
        name: "TensorArrayV3"
        input_arg {
          name: "size"
          type: DT_INT32
        }
        output_arg {
          name: "handle"
          type: DT_RESOURCE
        }
        output_arg {
          name: "flow"
          type: DT_FLOAT
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "element_shape"
          type: "shape"
          default_value {
            shape {
              unknown_rank: true
            }
          }
        }
        attr {
          name: "dynamic_size"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "clear_after_read"
          type: "bool"
          default_value {
            b: true
          }
        }
        attr {
          name: "tensor_array_name"
          type: "string"
          default_value {
            s: ""
          }
        }
        is_stateful: true
      }
      op {
        name: "TensorArrayWriteV3"
        input_arg {
          name: "handle"
          type: DT_RESOURCE
        }
        input_arg {
          name: "index"
          type: DT_INT32
        }
        input_arg {
          name: "value"
          type_attr: "T"
        }
        input_arg {
          name: "flow_in"
          type: DT_FLOAT
        }
        output_arg {
          name: "flow_out"
          type: DT_FLOAT
        }
        attr {
          name: "T"
          type: "type"
        }
        is_stateful: true
      }
      op {
        name: "Tile"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "multiples"
          type_attr: "Tmultiples"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tmultiples"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Transpose"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "perm"
          type_attr: "Tperm"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tperm"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "VariableV2"
        output_arg {
          name: "ref"
          type_attr: "dtype"
          is_ref: true
        }
        attr {
          name: "shape"
          type: "shape"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "container"
          type: "string"
          default_value {
            s: ""
          }
        }
        attr {
          name: "shared_name"
          type: "string"
          default_value {
            s: ""
          }
        }
        is_stateful: true
      }
      op {
        name: "ZerosLike"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
    }
    tags: "serve"
    tensorflow_version: "1.3.0"
    tensorflow_git_version: "b\'unknown\'"
  }
  graph_def {
    node {
      name: "Reshape/tensor"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 11
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000\004\000\000\000\005\000\000\000\006\000\000\000\007\000\000\000\010\000\000\000\t\000\000\000\n\000\000\000"
          }
        }
      }
    }
    node {
      name: "Reshape/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 11
          }
        }
      }
    }
    node {
      name: "Reshape"
      op: "Reshape"
      input: "Reshape/tensor"
      input: "Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 11
              }
            }
          }
        }
      }
    }
    node {
      name: "input_x"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 41
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
            dim {
              size: 41
            }
          }
        }
      }
    }
    node {
      name: "Placeholder"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: -1
            }
          }
        }
      }
    }
    node {
      name: "keep_prob"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
    }
    node {
      name: "Rank"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "range/start"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "range/delta"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "range"
      op: "Range"
      input: "range/start"
      input: "Rank"
      input: "range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "concat/values_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node {
      name: "concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "concat"
      op: "ConcatV2"
      input: "concat/values_0"
      input: "range"
      input: "concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transpose"
      op: "Transpose"
      input: "input_x"
      input: "concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 41
              }
            }
          }
        }
      }
    }
    node {
      name: "rnn/Shape"
      op: "Shape"
      input: "transpose"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "rnn/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "rnn/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "rnn/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "rnn/strided_slice"
      op: "StridedSlice"
      input: "rnn/Shape"
      input: "rnn/strided_slice/stack"
      input: "rnn/strided_slice/stack_1"
      input: "rnn/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "rnn/OutputProjectionWrapperZeroState/BasicRNNCellZeroState/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "rnn/OutputProjectionWrapperZeroState/BasicRNNCellZeroState/ExpandDims"
      op: "ExpandDims"
      input: "rnn/strided_slice"
      input: "rnn/OutputProjectionWrapperZeroState/BasicRNNCellZeroState/ExpandDims/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "rnn/OutputProjectionWrapperZeroState/BasicRNNCellZeroState/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 150
          }
        }
      }
    }
    node {
      name: "rnn/OutputProjectionWrapperZeroState/BasicRNNCellZeroState/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "rnn/OutputProjectionWrapperZeroState/BasicRNNCellZeroState/concat"
      op: "ConcatV2"
      input: "rnn/OutputProjectionWrapperZeroState/BasicRNNCellZeroState/ExpandDims"
      input: "rnn/OutputProjectionWrapperZeroState/BasicRNNCellZeroState/Const"
      input: "rnn/OutputProjectionWrapperZeroState/BasicRNNCellZeroState/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "rnn/OutputProjectionWrapperZeroState/BasicRNNCellZeroState/ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "rnn/OutputProjectionWrapperZeroState/BasicRNNCellZeroState/ExpandDims_1"
      op: "ExpandDims"
      input: "rnn/strided_slice"
      input: "rnn/OutputProjectionWrapperZeroState/BasicRNNCellZeroState/ExpandDims_1/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "rnn/OutputProjectionWrapperZeroState/BasicRNNCellZeroState/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 150
          }
        }
      }
    }
    node {
      name: "rnn/OutputProjectionWrapperZeroState/BasicRNNCellZeroState/zeros/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "rnn/OutputProjectionWrapperZeroState/BasicRNNCellZeroState/zeros"
      op: "Fill"
      input: "rnn/OutputProjectionWrapperZeroState/BasicRNNCellZeroState/concat"
      input: "rnn/OutputProjectionWrapperZeroState/BasicRNNCellZeroState/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
    }
    node {
      name: "rnn/Shape_1"
      op: "Shape"
      input: "transpose"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "rnn/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "rnn/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "rnn/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "rnn/strided_slice_1"
      op: "StridedSlice"
      input: "rnn/Shape_1"
      input: "rnn/strided_slice_1/stack"
      input: "rnn/strided_slice_1/stack_1"
      input: "rnn/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "rnn/Shape_2"
      op: "Shape"
      input: "transpose"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "rnn/strided_slice_2/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "rnn/strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "rnn/strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "rnn/strided_slice_2"
      op: "StridedSlice"
      input: "rnn/Shape_2"
      input: "rnn/strided_slice_2/stack"
      input: "rnn/strided_slice_2/stack_1"
      input: "rnn/strided_slice_2/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "rnn/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "rnn/ExpandDims"
      op: "ExpandDims"
      input: "rnn/strided_slice_2"
      input: "rnn/ExpandDims/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "rnn/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 11
          }
        }
      }
    }
    node {
      name: "rnn/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "rnn/concat"
      op: "ConcatV2"
      input: "rnn/ExpandDims"
      input: "rnn/Const"
      input: "rnn/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "rnn/zeros/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "rnn/zeros"
      op: "Fill"
      input: "rnn/concat"
      input: "rnn/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
    }
    node {
      name: "rnn/time"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "rnn/TensorArray"
      op: "TensorArrayV3"
      input: "rnn/strided_slice_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: "rnn/dynamic_rnn/output_0"
        }
      }
    }
    node {
      name: "rnn/TensorArray_1"
      op: "TensorArrayV3"
      input: "rnn/strided_slice_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: "rnn/dynamic_rnn/input_0"
        }
      }
    }
    node {
      name: "rnn/TensorArrayUnstack/Shape"
      op: "Shape"
      input: "transpose"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "rnn/TensorArrayUnstack/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "rnn/TensorArrayUnstack/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "rnn/TensorArrayUnstack/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "rnn/TensorArrayUnstack/strided_slice"
      op: "StridedSlice"
      input: "rnn/TensorArrayUnstack/Shape"
      input: "rnn/TensorArrayUnstack/strided_slice/stack"
      input: "rnn/TensorArrayUnstack/strided_slice/stack_1"
      input: "rnn/TensorArrayUnstack/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "rnn/TensorArrayUnstack/range/start"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "rnn/TensorArrayUnstack/range/delta"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "rnn/TensorArrayUnstack/range"
      op: "Range"
      input: "rnn/TensorArrayUnstack/range/start"
      input: "rnn/TensorArrayUnstack/strided_slice"
      input: "rnn/TensorArrayUnstack/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
      op: "TensorArrayScatterV3"
      input: "rnn/TensorArray_1"
      input: "rnn/TensorArrayUnstack/range"
      input: "transpose"
      input: "rnn/TensorArray_1:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transpose"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "rnn/while/Enter"
      op: "Enter"
      input: "rnn/time"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "rnn/while/rnn/while/"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "rnn/while/Enter_1"
      op: "Enter"
      input: "rnn/TensorArray:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "rnn/while/rnn/while/"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "rnn/while/Enter_2"
      op: "Enter"
      input: "rnn/OutputProjectionWrapperZeroState/BasicRNNCellZeroState/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "rnn/while/rnn/while/"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "rnn/while/Merge"
      op: "Merge"
      input: "rnn/while/Enter"
      input: "rnn/while/NextIteration"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "rnn/while/Merge_1"
      op: "Merge"
      input: "rnn/while/Enter_1"
      input: "rnn/while/NextIteration_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "rnn/while/Merge_2"
      op: "Merge"
      input: "rnn/while/Enter_2"
      input: "rnn/while/NextIteration_2"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 150
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "rnn/while/Less/Enter"
      op: "Enter"
      input: "rnn/strided_slice_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "rnn/while/rnn/while/"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "rnn/while/Less"
      op: "Less"
      input: "rnn/while/Merge"
      input: "rnn/while/Less/Enter"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "rnn/while/LoopCond"
      op: "LoopCond"
      input: "rnn/while/Less"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "rnn/while/Switch"
      op: "Switch"
      input: "rnn/while/Merge"
      input: "rnn/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/while/Merge"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "rnn/while/Switch_1"
      op: "Switch"
      input: "rnn/while/Merge_1"
      input: "rnn/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/while/Merge_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "rnn/while/Switch_2"
      op: "Switch"
      input: "rnn/while/Merge_2"
      input: "rnn/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/while/Merge_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 150
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
    }
    node {
      name: "rnn/while/Identity"
      op: "Identity"
      input: "rnn/while/Switch:1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "rnn/while/Identity_1"
      op: "Identity"
      input: "rnn/while/Switch_1:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "rnn/while/Identity_2"
      op: "Identity"
      input: "rnn/while/Switch_2:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
    }
    node {
      name: "rnn/while/TensorArrayReadV3/Enter"
      op: "Enter"
      input: "rnn/TensorArray_1"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "rnn/while/rnn/while/"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "rnn/while/TensorArrayReadV3/Enter_1"
      op: "Enter"
      input: "rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "rnn/while/rnn/while/"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "rnn/while/TensorArrayReadV3"
      op: "TensorArrayReadV3"
      input: "rnn/while/TensorArrayReadV3/Enter"
      input: "rnn/while/Identity"
      input: "rnn/while/TensorArrayReadV3/Enter_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 41
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\277\000\000\000\226\000\000\000"
          }
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.132647305727005
          }
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.132647305727005
          }
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 191
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Initializer/random_uniform/max"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Initializer/random_uniform/RandomUniform"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 191
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Initializer/random_uniform"
      op: "Add"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Initializer/random_uniform/mul"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 191
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/basic_rnn_cell/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 191
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 191
            }
            dim {
              size: 150
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Assign"
      op: "Assign"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/kernel"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 191
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/read"
      op: "Identity"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 191
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
    }
    node {
      name: "rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat/axis"
      op: "Const"
      input: "^rnn/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat"
      op: "ConcatV2"
      input: "rnn/while/TensorArrayReadV3"
      input: "rnn/while/Identity_2"
      input: "rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 191
              }
            }
          }
        }
      }
    }
    node {
      name: "rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul/Enter"
      op: "Enter"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 191
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "rnn/while/rnn/while/"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul"
      op: "MatMul"
      input: "rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat"
      input: "rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul/Enter"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/basic_rnn_cell/bias/Initializer/Const"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 150
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/basic_rnn_cell/bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 150
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/basic_rnn_cell/bias/Assign"
      op: "Assign"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/bias"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/bias/Initializer/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/basic_rnn_cell/bias/read"
      op: "Identity"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
            }
          }
        }
      }
    }
    node {
      name: "rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/BiasAdd/Enter"
      op: "Enter"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/bias/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "rnn/while/rnn/while/"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/BiasAdd"
      op: "BiasAdd"
      input: "rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul"
      input: "rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/BiasAdd/Enter"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node {
      name: "rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/Tanh"
      op: "Tanh"
      input: "rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/BiasAdd"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\226\000\000\000\013\000\000\000"
          }
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.19304683804512024
          }
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.19304683804512024
          }
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "rnn/output_projection_wrapper/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "rnn/output_projection_wrapper/kernel/Initializer/random_uniform/max"
      input: "rnn/output_projection_wrapper/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "rnn/output_projection_wrapper/kernel/Initializer/random_uniform/RandomUniform"
      input: "rnn/output_projection_wrapper/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/kernel/Initializer/random_uniform"
      op: "Add"
      input: "rnn/output_projection_wrapper/kernel/Initializer/random_uniform/mul"
      input: "rnn/output_projection_wrapper/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 150
            }
            dim {
              size: 11
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/kernel/Assign"
      op: "Assign"
      input: "rnn/output_projection_wrapper/kernel"
      input: "rnn/output_projection_wrapper/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/kernel/read"
      op: "Identity"
      input: "rnn/output_projection_wrapper/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
    }
    node {
      name: "rnn/while/rnn/output_projection_wrapper/output_projection_wrapper_1/MatMul/Enter"
      op: "Enter"
      input: "rnn/output_projection_wrapper/kernel/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "rnn/while/rnn/while/"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "rnn/while/rnn/output_projection_wrapper/output_projection_wrapper_1/MatMul"
      op: "MatMul"
      input: "rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/Tanh"
      input: "rnn/while/rnn/output_projection_wrapper/output_projection_wrapper_1/MatMul/Enter"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/bias/Initializer/Const"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 11
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 11
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/bias/Assign"
      op: "Assign"
      input: "rnn/output_projection_wrapper/bias"
      input: "rnn/output_projection_wrapper/bias/Initializer/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/bias/read"
      op: "Identity"
      input: "rnn/output_projection_wrapper/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 11
              }
            }
          }
        }
      }
    }
    node {
      name: "rnn/while/rnn/output_projection_wrapper/output_projection_wrapper_1/BiasAdd/Enter"
      op: "Enter"
      input: "rnn/output_projection_wrapper/bias/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "rnn/while/rnn/while/"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "rnn/while/rnn/output_projection_wrapper/output_projection_wrapper_1/BiasAdd"
      op: "BiasAdd"
      input: "rnn/while/rnn/output_projection_wrapper/output_projection_wrapper_1/MatMul"
      input: "rnn/while/rnn/output_projection_wrapper/output_projection_wrapper_1/BiasAdd/Enter"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node {
      name: "rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "rnn/TensorArray"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/while/rnn/output_projection_wrapper/output_projection_wrapper_1/BiasAdd"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "rnn/while/rnn/while/"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "rnn/while/TensorArrayWrite/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
      input: "rnn/while/Identity"
      input: "rnn/while/rnn/output_projection_wrapper/output_projection_wrapper_1/BiasAdd"
      input: "rnn/while/Identity_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/while/rnn/output_projection_wrapper/output_projection_wrapper_1/BiasAdd"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "rnn/while/add/y"
      op: "Const"
      input: "^rnn/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "rnn/while/add"
      op: "Add"
      input: "rnn/while/Identity"
      input: "rnn/while/add/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "rnn/while/NextIteration"
      op: "NextIteration"
      input: "rnn/while/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "rnn/while/NextIteration_1"
      op: "NextIteration"
      input: "rnn/while/TensorArrayWrite/TensorArrayWriteV3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "rnn/while/NextIteration_2"
      op: "NextIteration"
      input: "rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/Tanh"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
    }
    node {
      name: "rnn/while/Exit"
      op: "Exit"
      input: "rnn/while/Switch"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "rnn/while/Exit_1"
      op: "Exit"
      input: "rnn/while/Switch_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "rnn/while/Exit_2"
      op: "Exit"
      input: "rnn/while/Switch_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
    }
    node {
      name: "rnn/TensorArrayStack/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "rnn/TensorArray"
      input: "rnn/while/Exit_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/TensorArray"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "rnn/TensorArrayStack/range/start"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/TensorArray"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "rnn/TensorArrayStack/range/delta"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/TensorArray"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "rnn/TensorArrayStack/range"
      op: "Range"
      input: "rnn/TensorArrayStack/range/start"
      input: "rnn/TensorArrayStack/TensorArraySizeV3"
      input: "rnn/TensorArrayStack/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/TensorArray"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "rnn/TensorArrayStack/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "rnn/TensorArray"
      input: "rnn/TensorArrayStack/range"
      input: "rnn/while/Exit_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/TensorArray"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 11
            }
          }
        }
      }
    }
    node {
      name: "rnn/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 11
          }
        }
      }
    }
    node {
      name: "rnn/Rank"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "rnn/range/start"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "rnn/range/delta"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "rnn/range"
      op: "Range"
      input: "rnn/range/start"
      input: "rnn/Rank"
      input: "rnn/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "rnn/concat_1/values_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node {
      name: "rnn/concat_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "rnn/concat_1"
      op: "ConcatV2"
      input: "rnn/concat_1/values_0"
      input: "rnn/range"
      input: "rnn/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "rnn/transpose"
      op: "Transpose"
      input: "rnn/TensorArrayStack/TensorArrayGatherV3"
      input: "rnn/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
    }
    node {
      name: "logits/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\226\000\000\000\013\000\000\000"
          }
        }
      }
    }
    node {
      name: "logits/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.19304683804512024
          }
        }
      }
    }
    node {
      name: "logits/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.19304683804512024
          }
        }
      }
    }
    node {
      name: "logits/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "logits/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node {
      name: "logits/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "logits/kernel/Initializer/random_uniform/max"
      input: "logits/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "logits/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "logits/kernel/Initializer/random_uniform/RandomUniform"
      input: "logits/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
    }
    node {
      name: "logits/kernel/Initializer/random_uniform"
      op: "Add"
      input: "logits/kernel/Initializer/random_uniform/mul"
      input: "logits/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
    }
    node {
      name: "logits/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 150
            }
            dim {
              size: 11
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "logits/kernel/Assign"
      op: "Assign"
      input: "logits/kernel"
      input: "logits/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "logits/kernel/read"
      op: "Identity"
      input: "logits/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
    }
    node {
      name: "logits/bias/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 11
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "logits/bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 11
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "logits/bias/Assign"
      op: "Assign"
      input: "logits/bias"
      input: "logits/bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "logits/bias/read"
      op: "Identity"
      input: "logits/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 11
              }
            }
          }
        }
      }
    }
    node {
      name: "logits/MatMul"
      op: "MatMul"
      input: "rnn/while/Exit_2"
      input: "logits/kernel/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "logits/BiasAdd"
      op: "BiasAdd"
      input: "logits/MatMul"
      input: "logits/bias/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node {
      name: "SparseSoftmaxCrossEntropyWithLogits/Shape"
      op: "Shape"
      input: "Placeholder"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
      op: "SparseSoftmaxCrossEntropyWithLogits"
      input: "logits/BiasAdd"
      input: "Placeholder"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tlabels"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
    }
    node {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "Mean"
      op: "Mean"
      input: "SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
      input: "Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/Shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "gradients/Fill"
      op: "Fill"
      input: "gradients/Shape"
      input: "gradients/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/f_count"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "gradients/f_count_1"
      op: "Enter"
      input: "gradients/f_count"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "rnn/while/rnn/while/"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "gradients/Merge"
      op: "Merge"
      input: "gradients/f_count_1"
      input: "gradients/NextIteration"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch"
      op: "Switch"
      input: "gradients/Merge"
      input: "rnn/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Add/y"
      op: "Const"
      input: "^rnn/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "gradients/Add"
      op: "Add"
      input: "gradients/Switch:1"
      input: "gradients/Add/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/NextIteration"
      op: "NextIteration"
      input: "gradients/Add"
      input: "^gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/Tanh_grad/TanhGrad/StackPush"
      input: "^gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul_grad/MatMul_1/StackPush"
      input: "^gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/mod/StackPush"
      input: "^gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ShapeN/StackPush"
      input: "^gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ShapeN/StackPush_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/f_count_2"
      op: "Exit"
      input: "gradients/Switch"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/b_count"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "gradients/b_count_1"
      op: "Enter"
      input: "gradients/f_count_2"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "gradients/rnn/while/rnn/while/"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "gradients/Merge_1"
      op: "Merge"
      input: "gradients/b_count_1"
      input: "gradients/NextIteration_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/GreaterEqual/Enter"
      op: "Enter"
      input: "gradients/b_count"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "gradients/rnn/while/rnn/while/"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "gradients/GreaterEqual"
      op: "GreaterEqual"
      input: "gradients/Merge_1"
      input: "gradients/GreaterEqual/Enter"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/b_count_2"
      op: "LoopCond"
      input: "gradients/GreaterEqual"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_1"
      op: "Switch"
      input: "gradients/Merge_1"
      input: "gradients/b_count_2"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Sub"
      op: "Sub"
      input: "gradients/Switch_1:1"
      input: "gradients/GreaterEqual/Enter"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/NextIteration_1"
      op: "NextIteration"
      input: "gradients/Sub"
      input: "^gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/Tanh_grad/TanhGrad/b_sync"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/b_count_3"
      op: "Exit"
      input: "gradients/Switch_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mean_grad/Reshape/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "gradients/Mean_grad/Reshape"
      op: "Reshape"
      input: "gradients/Fill"
      input: "gradients/Mean_grad/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mean_grad/Shape"
      op: "Shape"
      input: "SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/Mean_grad/Tile"
      op: "Tile"
      input: "gradients/Mean_grad/Reshape"
      input: "gradients/Mean_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tmultiples"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mean_grad/Shape_1"
      op: "Shape"
      input: "SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/Mean_grad/Shape_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mean_grad/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "gradients/Mean_grad/Prod"
      op: "Prod"
      input: "gradients/Mean_grad/Shape_1"
      input: "gradients/Mean_grad/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/Mean_grad/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "gradients/Mean_grad/Prod_1"
      op: "Prod"
      input: "gradients/Mean_grad/Shape_2"
      input: "gradients/Mean_grad/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/Mean_grad/Maximum/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "gradients/Mean_grad/Maximum"
      op: "Maximum"
      input: "gradients/Mean_grad/Prod_1"
      input: "gradients/Mean_grad/Maximum/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mean_grad/floordiv"
      op: "FloorDiv"
      input: "gradients/Mean_grad/Prod"
      input: "gradients/Mean_grad/Maximum"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mean_grad/Cast"
      op: "Cast"
      input: "gradients/Mean_grad/floordiv"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mean_grad/truediv"
      op: "RealDiv"
      input: "gradients/Mean_grad/Tile"
      input: "gradients/Mean_grad/Cast"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like"
      op: "ZerosLike"
      input: "SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/PreventGradient"
      op: "PreventGradient"
      input: "SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "message"
        value {
          s: "Currently there is no way to take the second derivative of sparse_softmax_cross_entropy_with_logits due to the fused implementation\'s interaction with tf.gradients()"
        }
      }
    }
    node {
      name: "gradients/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "gradients/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims"
      op: "ExpandDims"
      input: "gradients/Mean_grad/truediv"
      input: "gradients/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/mul"
      op: "Mul"
      input: "gradients/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims"
      input: "gradients/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/PreventGradient"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/logits/BiasAdd_grad/BiasAddGrad"
      op: "BiasAddGrad"
      input: "gradients/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node {
      name: "gradients/logits/BiasAdd_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/mul"
      input: "^gradients/logits/BiasAdd_grad/BiasAddGrad"
    }
    node {
      name: "gradients/logits/BiasAdd_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/mul"
      input: "^gradients/logits/BiasAdd_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/mul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/logits/BiasAdd_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/logits/BiasAdd_grad/BiasAddGrad"
      input: "^gradients/logits/BiasAdd_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/logits/BiasAdd_grad/BiasAddGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 11
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/logits/MatMul_grad/MatMul"
      op: "MatMul"
      input: "gradients/logits/BiasAdd_grad/tuple/control_dependency"
      input: "logits/kernel/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/logits/MatMul_grad/MatMul_1"
      op: "MatMul"
      input: "rnn/while/Exit_2"
      input: "gradients/logits/BiasAdd_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: true
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/logits/MatMul_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/logits/MatMul_grad/MatMul"
      input: "^gradients/logits/MatMul_grad/MatMul_1"
    }
    node {
      name: "gradients/logits/MatMul_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/logits/MatMul_grad/MatMul"
      input: "^gradients/logits/MatMul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/logits/MatMul_grad/MatMul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/logits/MatMul_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/logits/MatMul_grad/MatMul_1"
      input: "^gradients/logits/MatMul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/logits/MatMul_grad/MatMul_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/rnn/while/Exit_2_grad/b_exit"
      op: "Enter"
      input: "gradients/logits/MatMul_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "gradients/rnn/while/rnn/while/"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "gradients/rnn/while/Exit_1_grad/b_exit"
      op: "Enter"
      input: "gradients/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "gradients/rnn/while/rnn/while/"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "gradients/rnn/while/Switch_2_grad/b_switch"
      op: "Merge"
      input: "gradients/rnn/while/Exit_2_grad/b_exit"
      input: "gradients/rnn/while/Switch_2_grad_1/NextIteration"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 150
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/rnn/while/Merge_2_grad/Switch"
      op: "Switch"
      input: "gradients/rnn/while/Switch_2_grad/b_switch"
      input: "gradients/b_count_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/rnn/while/Switch_2_grad/b_switch"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 150
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/rnn/while/Merge_2_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/rnn/while/Merge_2_grad/Switch"
    }
    node {
      name: "gradients/rnn/while/Merge_2_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/rnn/while/Merge_2_grad/Switch"
      input: "^gradients/rnn/while/Merge_2_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/rnn/while/Switch_2_grad/b_switch"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/rnn/while/Merge_2_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/rnn/while/Merge_2_grad/Switch:1"
      input: "^gradients/rnn/while/Merge_2_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/rnn/while/Switch_2_grad/b_switch"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/rnn/while/Enter_2_grad/Exit"
      op: "Exit"
      input: "gradients/rnn/while/Merge_2_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/Tanh_grad/TanhGrad/f_acc"
      op: "Stack"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/Tanh"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "elem_type"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "stack_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/Tanh_grad/TanhGrad/RefEnter"
      op: "RefEnter"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/Tanh_grad/TanhGrad/f_acc"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/Tanh"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "rnn/while/rnn/while/"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/Tanh_grad/TanhGrad/StackPush"
      op: "StackPush"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/Tanh_grad/TanhGrad/RefEnter"
      input: "rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/Tanh"
      input: "^gradients/Add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/Tanh"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "swap_memory"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/Tanh_grad/TanhGrad/StackPop/RefEnter"
      op: "RefEnter"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/Tanh_grad/TanhGrad/f_acc"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/Tanh"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "gradients/rnn/while/rnn/while/"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/Tanh_grad/TanhGrad/StackPop"
      op: "StackPop"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/Tanh_grad/TanhGrad/StackPop/RefEnter"
      input: "^gradients/Sub"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/Tanh"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "elem_type"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/Tanh_grad/TanhGrad/b_sync"
      op: "ControlTrigger"
      input: "^gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/Tanh_grad/TanhGrad/StackPop"
      input: "^gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul_grad/MatMul_1/StackPop"
      input: "^gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/mod/StackPop"
      input: "^gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ShapeN/StackPop"
      input: "^gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ShapeN/StackPop_1"
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/Tanh_grad/TanhGrad"
      op: "TanhGrad"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/Tanh_grad/TanhGrad/StackPop"
      input: "gradients/rnn/while/Merge_2_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/BiasAdd_grad/BiasAddGrad"
      op: "BiasAddGrad"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/Tanh_grad/TanhGrad"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/BiasAdd_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/Tanh_grad/TanhGrad"
      input: "^gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/BiasAdd_grad/BiasAddGrad"
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/BiasAdd_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/Tanh_grad/TanhGrad"
      input: "^gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/BiasAdd_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/Tanh_grad/TanhGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/BiasAdd_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/BiasAdd_grad/BiasAddGrad"
      input: "^gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/BiasAdd_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/BiasAdd_grad/BiasAddGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul_grad/MatMul/Enter"
      op: "Enter"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 191
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "gradients/rnn/while/rnn/while/"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul_grad/MatMul"
      op: "MatMul"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/BiasAdd_grad/tuple/control_dependency"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul_grad/MatMul/Enter"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 191
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul_grad/MatMul_1/f_acc"
      op: "Stack"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "elem_type"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "stack_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul_grad/MatMul_1/RefEnter"
      op: "RefEnter"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul_grad/MatMul_1/f_acc"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "rnn/while/rnn/while/"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul_grad/MatMul_1/StackPush"
      op: "StackPush"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul_grad/MatMul_1/RefEnter"
      input: "rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat"
      input: "^gradients/Add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 191
              }
            }
          }
        }
      }
      attr {
        key: "swap_memory"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul_grad/MatMul_1/StackPop/RefEnter"
      op: "RefEnter"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul_grad/MatMul_1/f_acc"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "gradients/rnn/while/rnn/while/"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul_grad/MatMul_1/StackPop"
      op: "StackPop"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul_grad/MatMul_1/StackPop/RefEnter"
      input: "^gradients/Sub"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 191
              }
            }
          }
        }
      }
      attr {
        key: "elem_type"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul_grad/MatMul_1"
      op: "MatMul"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul_grad/MatMul_1/StackPop"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/BiasAdd_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 191
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: true
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul_grad/MatMul"
      input: "^gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul_grad/MatMul_1"
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul_grad/MatMul"
      input: "^gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul_grad/MatMul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 191
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul_grad/MatMul_1"
      input: "^gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul_grad/MatMul_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 191
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/BiasAdd/Enter_grad/b_acc"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 150
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/BiasAdd/Enter_grad/b_acc_1"
      op: "Enter"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/BiasAdd/Enter_grad/b_acc"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "gradients/rnn/while/rnn/while/"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/BiasAdd/Enter_grad/b_acc_2"
      op: "Merge"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/BiasAdd/Enter_grad/b_acc_1"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/BiasAdd/Enter_grad/NextIteration"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/BiasAdd/Enter_grad/Switch"
      op: "Switch"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/BiasAdd/Enter_grad/b_acc_2"
      input: "gradients/b_count_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
            }
            shape {
              dim {
                size: 150
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/BiasAdd/Enter_grad/Add"
      op: "Add"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/BiasAdd/Enter_grad/Switch:1"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/BiasAdd_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/BiasAdd/Enter_grad/NextIteration"
      op: "NextIteration"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/BiasAdd/Enter_grad/Add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/BiasAdd/Enter_grad/b_acc_3"
      op: "Exit"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/BiasAdd/Enter_grad/Switch"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/Rank"
      op: "Const"
      input: "^gradients/Sub"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/mod/f_acc"
      op: "Stack"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat/axis"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "elem_type"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "stack_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/mod/RefEnter"
      op: "RefEnter"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/mod/f_acc"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat/axis"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "rnn/while/rnn/while/"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/mod/StackPush"
      op: "StackPush"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/mod/RefEnter"
      input: "rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat/axis"
      input: "^gradients/Add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat/axis"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "swap_memory"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/mod/StackPop/RefEnter"
      op: "RefEnter"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/mod/f_acc"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat/axis"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "gradients/rnn/while/rnn/while/"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/mod/StackPop"
      op: "StackPop"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/mod/StackPop/RefEnter"
      input: "^gradients/Sub"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat/axis"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "elem_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/mod"
      op: "FloorMod"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/mod/StackPop"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/Rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/Shape"
      op: "Shape"
      input: "rnn/while/TensorArrayReadV3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ShapeN/f_acc"
      op: "Stack"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/while/TensorArrayReadV3"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "elem_type"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "stack_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ShapeN/RefEnter"
      op: "RefEnter"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ShapeN/f_acc"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/while/TensorArrayReadV3"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "rnn/while/rnn/while/"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ShapeN/StackPush"
      op: "StackPush"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ShapeN/RefEnter"
      input: "rnn/while/TensorArrayReadV3"
      input: "^gradients/Add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/while/TensorArrayReadV3"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 41
              }
            }
          }
        }
      }
      attr {
        key: "swap_memory"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ShapeN/StackPop/RefEnter"
      op: "RefEnter"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ShapeN/f_acc"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/while/TensorArrayReadV3"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "gradients/rnn/while/rnn/while/"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ShapeN/StackPop"
      op: "StackPop"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ShapeN/StackPop/RefEnter"
      input: "^gradients/Sub"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/while/TensorArrayReadV3"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 41
              }
            }
          }
        }
      }
      attr {
        key: "elem_type"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ShapeN/f_acc_1"
      op: "Stack"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/while/Identity_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "elem_type"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "stack_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ShapeN/RefEnter_1"
      op: "RefEnter"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ShapeN/f_acc_1"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/while/Identity_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "rnn/while/rnn/while/"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ShapeN/StackPush_1"
      op: "StackPush"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ShapeN/RefEnter_1"
      input: "rnn/while/Identity_2"
      input: "^gradients/Add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/while/Identity_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "swap_memory"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ShapeN/StackPop_1/RefEnter"
      op: "RefEnter"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ShapeN/f_acc_1"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/while/Identity_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "gradients/rnn/while/rnn/while/"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ShapeN/StackPop_1"
      op: "StackPop"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ShapeN/StackPop_1/RefEnter"
      input: "^gradients/Sub"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/while/Identity_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "elem_type"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ShapeN"
      op: "ShapeN"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ShapeN/StackPop"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ShapeN/StackPop_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ConcatOffset"
      op: "ConcatOffset"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/mod"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ShapeN"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ShapeN:1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/Slice"
      op: "Slice"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul_grad/tuple/control_dependency"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ConcatOffset"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ShapeN"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/Slice_1"
      op: "Slice"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul_grad/tuple/control_dependency"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ConcatOffset:1"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ShapeN:1"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/Slice"
      input: "^gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/Slice_1"
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/Slice"
      input: "^gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/Slice"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 41
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/Slice_1"
      input: "^gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/Slice_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul/Enter_grad/b_acc"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 191
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 191
              }
              dim {
                size: 150
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul/Enter_grad/b_acc_1"
      op: "Enter"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul/Enter_grad/b_acc"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 191
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "gradients/rnn/while/rnn/while/"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul/Enter_grad/b_acc_2"
      op: "Merge"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul/Enter_grad/b_acc_1"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul/Enter_grad/NextIteration"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 191
              }
              dim {
                size: 150
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul/Enter_grad/Switch"
      op: "Switch"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul/Enter_grad/b_acc_2"
      input: "gradients/b_count_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 191
              }
              dim {
                size: 150
              }
            }
            shape {
              dim {
                size: 191
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul/Enter_grad/Add"
      op: "Add"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul/Enter_grad/Switch:1"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 191
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul/Enter_grad/NextIteration"
      op: "NextIteration"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul/Enter_grad/Add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 191
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul/Enter_grad/b_acc_3"
      op: "Exit"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul/Enter_grad/Switch"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 191
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/rnn/while/Switch_2_grad_1/NextIteration"
      op: "NextIteration"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
    }
    node {
      name: "beta1_power/initial_value"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.8999999761581421
          }
        }
      }
    }
    node {
      name: "beta1_power"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "beta1_power/Assign"
      op: "Assign"
      input: "beta1_power"
      input: "beta1_power/initial_value"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "beta1_power/read"
      op: "Identity"
      input: "beta1_power"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "beta2_power/initial_value"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9990000128746033
          }
        }
      }
    }
    node {
      name: "beta2_power"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "beta2_power/Assign"
      op: "Assign"
      input: "beta2_power"
      input: "beta2_power/initial_value"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "beta2_power/read"
      op: "Identity"
      input: "beta2_power"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 191
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 191
              }
              dim {
                size: 150
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 191
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 191
            }
            dim {
              size: 150
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam/Assign"
      op: "Assign"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 191
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam/read"
      op: "Identity"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 191
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 191
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 191
              }
              dim {
                size: 150
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 191
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 191
            }
            dim {
              size: 150
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam_1/Assign"
      op: "Assign"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam_1"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 191
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam_1/read"
      op: "Identity"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 191
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 150
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 150
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam/Assign"
      op: "Assign"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam/read"
      op: "Identity"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
            }
          }
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 150
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 150
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam_1/Assign"
      op: "Assign"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam_1"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam_1/read"
      op: "Identity"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
            }
          }
        }
      }
    }
    node {
      name: "logits/kernel/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 150
              }
              dim {
                size: 11
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "logits/kernel/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 150
            }
            dim {
              size: 11
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "logits/kernel/Adam/Assign"
      op: "Assign"
      input: "logits/kernel/Adam"
      input: "logits/kernel/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "logits/kernel/Adam/read"
      op: "Identity"
      input: "logits/kernel/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
    }
    node {
      name: "logits/kernel/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 150
              }
              dim {
                size: 11
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "logits/kernel/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 150
            }
            dim {
              size: 11
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "logits/kernel/Adam_1/Assign"
      op: "Assign"
      input: "logits/kernel/Adam_1"
      input: "logits/kernel/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "logits/kernel/Adam_1/read"
      op: "Identity"
      input: "logits/kernel/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
    }
    node {
      name: "logits/bias/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 11
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "logits/bias/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 11
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "logits/bias/Adam/Assign"
      op: "Assign"
      input: "logits/bias/Adam"
      input: "logits/bias/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "logits/bias/Adam/read"
      op: "Identity"
      input: "logits/bias/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 11
              }
            }
          }
        }
      }
    }
    node {
      name: "logits/bias/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 11
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "logits/bias/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 11
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "logits/bias/Adam_1/Assign"
      op: "Assign"
      input: "logits/bias/Adam_1"
      input: "logits/bias/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "logits/bias/Adam_1/read"
      op: "Identity"
      input: "logits/bias/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 11
              }
            }
          }
        }
      }
    }
    node {
      name: "Adam/learning_rate"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0010000000474974513
          }
        }
      }
    }
    node {
      name: "Adam/beta1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.8999999761581421
          }
        }
      }
    }
    node {
      name: "Adam/beta2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9990000128746033
          }
        }
      }
    }
    node {
      name: "Adam/epsilon"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.99999993922529e-09
          }
        }
      }
    }
    node {
      name: "Adam/update_rnn/output_projection_wrapper/basic_rnn_cell/kernel/ApplyAdam"
      op: "ApplyAdam"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/kernel"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam_1"
      input: "beta1_power/read"
      input: "beta2_power/read"
      input: "Adam/learning_rate"
      input: "Adam/beta1"
      input: "Adam/beta2"
      input: "Adam/epsilon"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul/Enter_grad/b_acc_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 191
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "Adam/update_rnn/output_projection_wrapper/basic_rnn_cell/bias/ApplyAdam"
      op: "ApplyAdam"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/bias"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam_1"
      input: "beta1_power/read"
      input: "beta2_power/read"
      input: "Adam/learning_rate"
      input: "Adam/beta1"
      input: "Adam/beta2"
      input: "Adam/epsilon"
      input: "gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/BiasAdd/Enter_grad/b_acc_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "Adam/update_logits/kernel/ApplyAdam"
      op: "ApplyAdam"
      input: "logits/kernel"
      input: "logits/kernel/Adam"
      input: "logits/kernel/Adam_1"
      input: "beta1_power/read"
      input: "beta2_power/read"
      input: "Adam/learning_rate"
      input: "Adam/beta1"
      input: "Adam/beta2"
      input: "Adam/epsilon"
      input: "gradients/logits/MatMul_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "Adam/update_logits/bias/ApplyAdam"
      op: "ApplyAdam"
      input: "logits/bias"
      input: "logits/bias/Adam"
      input: "logits/bias/Adam_1"
      input: "beta1_power/read"
      input: "beta2_power/read"
      input: "Adam/learning_rate"
      input: "Adam/beta1"
      input: "Adam/beta2"
      input: "Adam/epsilon"
      input: "gradients/logits/BiasAdd_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "Adam/mul"
      op: "Mul"
      input: "beta1_power/read"
      input: "Adam/beta1"
      input: "^Adam/update_rnn/output_projection_wrapper/basic_rnn_cell/kernel/ApplyAdam"
      input: "^Adam/update_rnn/output_projection_wrapper/basic_rnn_cell/bias/ApplyAdam"
      input: "^Adam/update_logits/kernel/ApplyAdam"
      input: "^Adam/update_logits/bias/ApplyAdam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "Adam/Assign"
      op: "Assign"
      input: "beta1_power"
      input: "Adam/mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "Adam/mul_1"
      op: "Mul"
      input: "beta2_power/read"
      input: "Adam/beta2"
      input: "^Adam/update_rnn/output_projection_wrapper/basic_rnn_cell/kernel/ApplyAdam"
      input: "^Adam/update_rnn/output_projection_wrapper/basic_rnn_cell/bias/ApplyAdam"
      input: "^Adam/update_logits/kernel/ApplyAdam"
      input: "^Adam/update_logits/bias/ApplyAdam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "Adam/Assign_1"
      op: "Assign"
      input: "beta2_power"
      input: "Adam/mul_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "Adam"
      op: "NoOp"
      input: "^Adam/update_rnn/output_projection_wrapper/basic_rnn_cell/kernel/ApplyAdam"
      input: "^Adam/update_rnn/output_projection_wrapper/basic_rnn_cell/bias/ApplyAdam"
      input: "^Adam/update_logits/kernel/ApplyAdam"
      input: "^Adam/update_logits/bias/ApplyAdam"
      input: "^Adam/Assign"
      input: "^Adam/Assign_1"
    }
    node {
      name: "correct"
      op: "InTopK"
      input: "logits/BiasAdd"
      input: "Placeholder"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "k"
        value {
          i: 1
        }
      }
    }
    node {
      name: "prediction/dimension"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "prediction"
      op: "ArgMax"
      input: "logits/BiasAdd"
      input: "prediction/dimension"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_type"
        value {
          type: DT_INT64
        }
      }
    }
    node {
      name: "Cast"
      op: "Cast"
      input: "correct"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "Mean_1"
      op: "Mean"
      input: "Cast"
      input: "Const_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "init"
      op: "NoOp"
      input: "^rnn/output_projection_wrapper/basic_rnn_cell/kernel/Assign"
      input: "^rnn/output_projection_wrapper/basic_rnn_cell/bias/Assign"
      input: "^rnn/output_projection_wrapper/kernel/Assign"
      input: "^rnn/output_projection_wrapper/bias/Assign"
      input: "^logits/kernel/Assign"
      input: "^logits/bias/Assign"
      input: "^beta1_power/Assign"
      input: "^beta2_power/Assign"
      input: "^rnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam/Assign"
      input: "^rnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam_1/Assign"
      input: "^rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam/Assign"
      input: "^rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam_1/Assign"
      input: "^logits/kernel/Adam/Assign"
      input: "^logits/kernel/Adam_1/Assign"
      input: "^logits/bias/Adam/Assign"
      input: "^logits/bias/Adam_1/Assign"
    }
    node {
      name: "save/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "model"
          }
        }
      }
    }
    node {
      name: "save/SaveV2/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 16
              }
            }
            string_val: "beta1_power"
            string_val: "beta2_power"
            string_val: "logits/bias"
            string_val: "logits/bias/Adam"
            string_val: "logits/bias/Adam_1"
            string_val: "logits/kernel"
            string_val: "logits/kernel/Adam"
            string_val: "logits/kernel/Adam_1"
            string_val: "rnn/output_projection_wrapper/basic_rnn_cell/bias"
            string_val: "rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam"
            string_val: "rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam_1"
            string_val: "rnn/output_projection_wrapper/basic_rnn_cell/kernel"
            string_val: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam"
            string_val: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam_1"
            string_val: "rnn/output_projection_wrapper/bias"
            string_val: "rnn/output_projection_wrapper/kernel"
          }
        }
      }
    }
    node {
      name: "save/SaveV2/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 16
              }
            }
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/SaveV2"
      op: "SaveV2"
      input: "save/Const"
      input: "save/SaveV2/tensor_names"
      input: "save/SaveV2/shape_and_slices"
      input: "beta1_power"
      input: "beta2_power"
      input: "logits/bias"
      input: "logits/bias/Adam"
      input: "logits/bias/Adam_1"
      input: "logits/kernel"
      input: "logits/kernel/Adam"
      input: "logits/kernel/Adam_1"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/bias"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam_1"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/kernel"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam_1"
      input: "rnn/output_projection_wrapper/bias"
      input: "rnn/output_projection_wrapper/kernel"
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/control_dependency"
      op: "Identity"
      input: "save/Const"
      input: "^save/SaveV2"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@save/Const"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/RestoreV2/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "beta1_power"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2/tensor_names"
      input: "save/RestoreV2/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign"
      op: "Assign"
      input: "beta1_power"
      input: "save/RestoreV2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_1/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "beta2_power"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_1/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_1"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_1/tensor_names"
      input: "save/RestoreV2_1/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_1"
      op: "Assign"
      input: "beta2_power"
      input: "save/RestoreV2_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_2/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "logits/bias"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_2/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_2"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_2/tensor_names"
      input: "save/RestoreV2_2/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_2"
      op: "Assign"
      input: "logits/bias"
      input: "save/RestoreV2_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_3/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "logits/bias/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_3/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_3"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_3/tensor_names"
      input: "save/RestoreV2_3/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_3"
      op: "Assign"
      input: "logits/bias/Adam"
      input: "save/RestoreV2_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_4/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "logits/bias/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_4/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_4"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_4/tensor_names"
      input: "save/RestoreV2_4/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_4"
      op: "Assign"
      input: "logits/bias/Adam_1"
      input: "save/RestoreV2_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_5/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "logits/kernel"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_5/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_5"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_5/tensor_names"
      input: "save/RestoreV2_5/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_5"
      op: "Assign"
      input: "logits/kernel"
      input: "save/RestoreV2_5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_6/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "logits/kernel/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_6/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_6"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_6/tensor_names"
      input: "save/RestoreV2_6/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_6"
      op: "Assign"
      input: "logits/kernel/Adam"
      input: "save/RestoreV2_6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_7/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "logits/kernel/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_7/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_7"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_7/tensor_names"
      input: "save/RestoreV2_7/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_7"
      op: "Assign"
      input: "logits/kernel/Adam_1"
      input: "save/RestoreV2_7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_8/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "rnn/output_projection_wrapper/basic_rnn_cell/bias"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_8/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_8"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_8/tensor_names"
      input: "save/RestoreV2_8/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_8"
      op: "Assign"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/bias"
      input: "save/RestoreV2_8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_9/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_9/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_9"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_9/tensor_names"
      input: "save/RestoreV2_9/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_9"
      op: "Assign"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam"
      input: "save/RestoreV2_9"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_10/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_10/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_10"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_10/tensor_names"
      input: "save/RestoreV2_10/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_10"
      op: "Assign"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam_1"
      input: "save/RestoreV2_10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_11/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "rnn/output_projection_wrapper/basic_rnn_cell/kernel"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_11/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_11"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_11/tensor_names"
      input: "save/RestoreV2_11/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_11"
      op: "Assign"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/kernel"
      input: "save/RestoreV2_11"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 191
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_12/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_12/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_12"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_12/tensor_names"
      input: "save/RestoreV2_12/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_12"
      op: "Assign"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam"
      input: "save/RestoreV2_12"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 191
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_13/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_13/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_13"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_13/tensor_names"
      input: "save/RestoreV2_13/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_13"
      op: "Assign"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam_1"
      input: "save/RestoreV2_13"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 191
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_14/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "rnn/output_projection_wrapper/bias"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_14/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_14"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_14/tensor_names"
      input: "save/RestoreV2_14/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_14"
      op: "Assign"
      input: "rnn/output_projection_wrapper/bias"
      input: "save/RestoreV2_14"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_15/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "rnn/output_projection_wrapper/kernel"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_15/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_15"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_15/tensor_names"
      input: "save/RestoreV2_15/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_15"
      op: "Assign"
      input: "rnn/output_projection_wrapper/kernel"
      input: "save/RestoreV2_15"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/restore_all"
      op: "NoOp"
      input: "^save/Assign"
      input: "^save/Assign_1"
      input: "^save/Assign_2"
      input: "^save/Assign_3"
      input: "^save/Assign_4"
      input: "^save/Assign_5"
      input: "^save/Assign_6"
      input: "^save/Assign_7"
      input: "^save/Assign_8"
      input: "^save/Assign_9"
      input: "^save/Assign_10"
      input: "^save/Assign_11"
      input: "^save/Assign_12"
      input: "^save/Assign_13"
      input: "^save/Assign_14"
      input: "^save/Assign_15"
    }
    node {
      name: "init_1"
      op: "NoOp"
      input: "^rnn/output_projection_wrapper/basic_rnn_cell/kernel/Assign"
      input: "^rnn/output_projection_wrapper/basic_rnn_cell/bias/Assign"
      input: "^rnn/output_projection_wrapper/kernel/Assign"
      input: "^rnn/output_projection_wrapper/bias/Assign"
      input: "^logits/kernel/Assign"
      input: "^logits/bias/Assign"
      input: "^beta1_power/Assign"
      input: "^beta2_power/Assign"
      input: "^rnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam/Assign"
      input: "^rnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam_1/Assign"
      input: "^rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam/Assign"
      input: "^rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam_1/Assign"
      input: "^logits/kernel/Adam/Assign"
      input: "^logits/kernel/Adam_1/Assign"
      input: "^logits/bias/Adam/Assign"
      input: "^logits/bias/Adam_1/Assign"
    }
    node {
      name: "save_1/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "model"
          }
        }
      }
    }
    node {
      name: "save_1/StringJoin/inputs_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "_temp_4593023d0113426d8365942d71044821/part"
          }
        }
      }
    }
    node {
      name: "save_1/StringJoin"
      op: "StringJoin"
      input: "save_1/Const"
      input: "save_1/StringJoin/inputs_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "separator"
        value {
          s: ""
        }
      }
    }
    node {
      name: "save_1/num_shards"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "save_1/ShardedFilename/shard"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "save_1/ShardedFilename"
      op: "ShardedFilename"
      input: "save_1/StringJoin"
      input: "save_1/ShardedFilename/shard"
      input: "save_1/num_shards"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save_1/SaveV2/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 16
              }
            }
            string_val: "beta1_power"
            string_val: "beta2_power"
            string_val: "logits/bias"
            string_val: "logits/bias/Adam"
            string_val: "logits/bias/Adam_1"
            string_val: "logits/kernel"
            string_val: "logits/kernel/Adam"
            string_val: "logits/kernel/Adam_1"
            string_val: "rnn/output_projection_wrapper/basic_rnn_cell/bias"
            string_val: "rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam"
            string_val: "rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam_1"
            string_val: "rnn/output_projection_wrapper/basic_rnn_cell/kernel"
            string_val: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam"
            string_val: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam_1"
            string_val: "rnn/output_projection_wrapper/bias"
            string_val: "rnn/output_projection_wrapper/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/SaveV2/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 16
              }
            }
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/SaveV2"
      op: "SaveV2"
      input: "save_1/ShardedFilename"
      input: "save_1/SaveV2/tensor_names"
      input: "save_1/SaveV2/shape_and_slices"
      input: "beta1_power"
      input: "beta2_power"
      input: "logits/bias"
      input: "logits/bias/Adam"
      input: "logits/bias/Adam_1"
      input: "logits/kernel"
      input: "logits/kernel/Adam"
      input: "logits/kernel/Adam_1"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/bias"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam_1"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/kernel"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam_1"
      input: "rnn/output_projection_wrapper/bias"
      input: "rnn/output_projection_wrapper/kernel"
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/control_dependency"
      op: "Identity"
      input: "save_1/ShardedFilename"
      input: "^save_1/SaveV2"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@save_1/ShardedFilename"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save_1/MergeV2Checkpoints/checkpoint_prefixes"
      op: "Pack"
      input: "save_1/ShardedFilename"
      input: "^save_1/control_dependency"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "save_1/MergeV2Checkpoints"
      op: "MergeV2Checkpoints"
      input: "save_1/MergeV2Checkpoints/checkpoint_prefixes"
      input: "save_1/Const"
      attr {
        key: "delete_old_dirs"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/Identity"
      op: "Identity"
      input: "save_1/Const"
      input: "^save_1/control_dependency"
      input: "^save_1/MergeV2Checkpoints"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "beta1_power"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2/tensor_names"
      input: "save_1/RestoreV2/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign"
      op: "Assign"
      input: "beta1_power"
      input: "save_1/RestoreV2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_1/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "beta2_power"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_1/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_1"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_1/tensor_names"
      input: "save_1/RestoreV2_1/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_1"
      op: "Assign"
      input: "beta2_power"
      input: "save_1/RestoreV2_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_2/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "logits/bias"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_2/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_2"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_2/tensor_names"
      input: "save_1/RestoreV2_2/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_2"
      op: "Assign"
      input: "logits/bias"
      input: "save_1/RestoreV2_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_3/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "logits/bias/Adam"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_3/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_3"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_3/tensor_names"
      input: "save_1/RestoreV2_3/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_3"
      op: "Assign"
      input: "logits/bias/Adam"
      input: "save_1/RestoreV2_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_4/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "logits/bias/Adam_1"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_4/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_4"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_4/tensor_names"
      input: "save_1/RestoreV2_4/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_4"
      op: "Assign"
      input: "logits/bias/Adam_1"
      input: "save_1/RestoreV2_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_5/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "logits/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_5/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_5"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_5/tensor_names"
      input: "save_1/RestoreV2_5/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_5"
      op: "Assign"
      input: "logits/kernel"
      input: "save_1/RestoreV2_5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_6/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "logits/kernel/Adam"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_6/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_6"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_6/tensor_names"
      input: "save_1/RestoreV2_6/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_6"
      op: "Assign"
      input: "logits/kernel/Adam"
      input: "save_1/RestoreV2_6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_7/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "logits/kernel/Adam_1"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_7/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_7"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_7/tensor_names"
      input: "save_1/RestoreV2_7/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_7"
      op: "Assign"
      input: "logits/kernel/Adam_1"
      input: "save_1/RestoreV2_7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@logits/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_8/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "rnn/output_projection_wrapper/basic_rnn_cell/bias"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_8/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_8"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_8/tensor_names"
      input: "save_1/RestoreV2_8/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_8"
      op: "Assign"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/bias"
      input: "save_1/RestoreV2_8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_9/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_9/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_9"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_9/tensor_names"
      input: "save_1/RestoreV2_9/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_9"
      op: "Assign"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam"
      input: "save_1/RestoreV2_9"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_10/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam_1"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_10/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_10"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_10/tensor_names"
      input: "save_1/RestoreV2_10/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_10"
      op: "Assign"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam_1"
      input: "save_1/RestoreV2_10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_11/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "rnn/output_projection_wrapper/basic_rnn_cell/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_11/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_11"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_11/tensor_names"
      input: "save_1/RestoreV2_11/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_11"
      op: "Assign"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/kernel"
      input: "save_1/RestoreV2_11"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 191
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_12/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_12/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_12"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_12/tensor_names"
      input: "save_1/RestoreV2_12/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_12"
      op: "Assign"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam"
      input: "save_1/RestoreV2_12"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 191
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_13/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam_1"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_13/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_13"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_13/tensor_names"
      input: "save_1/RestoreV2_13/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_13"
      op: "Assign"
      input: "rnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam_1"
      input: "save_1/RestoreV2_13"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/basic_rnn_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 191
              }
              dim {
                size: 150
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_14/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "rnn/output_projection_wrapper/bias"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_14/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_14"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_14/tensor_names"
      input: "save_1/RestoreV2_14/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_14"
      op: "Assign"
      input: "rnn/output_projection_wrapper/bias"
      input: "save_1/RestoreV2_14"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_15/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "rnn/output_projection_wrapper/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_15/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_15"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_15/tensor_names"
      input: "save_1/RestoreV2_15/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_15"
      op: "Assign"
      input: "rnn/output_projection_wrapper/kernel"
      input: "save_1/RestoreV2_15"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@rnn/output_projection_wrapper/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 150
              }
              dim {
                size: 11
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/restore_shard"
      op: "NoOp"
      input: "^save_1/Assign"
      input: "^save_1/Assign_1"
      input: "^save_1/Assign_2"
      input: "^save_1/Assign_3"
      input: "^save_1/Assign_4"
      input: "^save_1/Assign_5"
      input: "^save_1/Assign_6"
      input: "^save_1/Assign_7"
      input: "^save_1/Assign_8"
      input: "^save_1/Assign_9"
      input: "^save_1/Assign_10"
      input: "^save_1/Assign_11"
      input: "^save_1/Assign_12"
      input: "^save_1/Assign_13"
      input: "^save_1/Assign_14"
      input: "^save_1/Assign_15"
    }
    node {
      name: "save_1/restore_all"
      op: "NoOp"
      input: "^save_1/restore_shard"
    }
    versions {
      producer: 24
    }
  }
  saver_def {
    filename_tensor_name: "save_1/Const:0"
    save_tensor_name: "save_1/Identity:0"
    restore_op_name: "save_1/restore_all"
    max_to_keep: 5
    sharded: true
    keep_checkpoint_every_n_hours: 10000.0
    version: V2
  }
  collection_def {
    key: "train_op"
    value {
      node_list {
        value: "Adam"
      }
    }
  }
  collection_def {
    key: "trainable_variables"
    value {
      bytes_list {
        value: "\n5rnn/output_projection_wrapper/basic_rnn_cell/kernel:0\022:rnn/output_projection_wrapper/basic_rnn_cell/kernel/Assign\032:rnn/output_projection_wrapper/basic_rnn_cell/kernel/read:0"
        value: "\n3rnn/output_projection_wrapper/basic_rnn_cell/bias:0\0228rnn/output_projection_wrapper/basic_rnn_cell/bias/Assign\0328rnn/output_projection_wrapper/basic_rnn_cell/bias/read:0"
        value: "\n&rnn/output_projection_wrapper/kernel:0\022+rnn/output_projection_wrapper/kernel/Assign\032+rnn/output_projection_wrapper/kernel/read:0"
        value: "\n$rnn/output_projection_wrapper/bias:0\022)rnn/output_projection_wrapper/bias/Assign\032)rnn/output_projection_wrapper/bias/read:0"
        value: "\n\017logits/kernel:0\022\024logits/kernel/Assign\032\024logits/kernel/read:0"
        value: "\n\rlogits/bias:0\022\022logits/bias/Assign\032\022logits/bias/read:0"
      }
    }
  }
  collection_def {
    key: "variables"
    value {
      bytes_list {
        value: "\n5rnn/output_projection_wrapper/basic_rnn_cell/kernel:0\022:rnn/output_projection_wrapper/basic_rnn_cell/kernel/Assign\032:rnn/output_projection_wrapper/basic_rnn_cell/kernel/read:0"
        value: "\n3rnn/output_projection_wrapper/basic_rnn_cell/bias:0\0228rnn/output_projection_wrapper/basic_rnn_cell/bias/Assign\0328rnn/output_projection_wrapper/basic_rnn_cell/bias/read:0"
        value: "\n&rnn/output_projection_wrapper/kernel:0\022+rnn/output_projection_wrapper/kernel/Assign\032+rnn/output_projection_wrapper/kernel/read:0"
        value: "\n$rnn/output_projection_wrapper/bias:0\022)rnn/output_projection_wrapper/bias/Assign\032)rnn/output_projection_wrapper/bias/read:0"
        value: "\n\017logits/kernel:0\022\024logits/kernel/Assign\032\024logits/kernel/read:0"
        value: "\n\rlogits/bias:0\022\022logits/bias/Assign\032\022logits/bias/read:0"
        value: "\n\rbeta1_power:0\022\022beta1_power/Assign\032\022beta1_power/read:0"
        value: "\n\rbeta2_power:0\022\022beta2_power/Assign\032\022beta2_power/read:0"
        value: "\n:rnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam:0\022?rnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam/Assign\032?rnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam/read:0"
        value: "\n<rnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam_1:0\022Arnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam_1/Assign\032Arnn/output_projection_wrapper/basic_rnn_cell/kernel/Adam_1/read:0"
        value: "\n8rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam:0\022=rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam/Assign\032=rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam/read:0"
        value: "\n:rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam_1:0\022?rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam_1/Assign\032?rnn/output_projection_wrapper/basic_rnn_cell/bias/Adam_1/read:0"
        value: "\n\024logits/kernel/Adam:0\022\031logits/kernel/Adam/Assign\032\031logits/kernel/Adam/read:0"
        value: "\n\026logits/kernel/Adam_1:0\022\033logits/kernel/Adam_1/Assign\032\033logits/kernel/Adam_1/read:0"
        value: "\n\022logits/bias/Adam:0\022\027logits/bias/Adam/Assign\032\027logits/bias/Adam/read:0"
        value: "\n\024logits/bias/Adam_1:0\022\031logits/bias/Adam_1/Assign\032\031logits/bias/Adam_1/read:0"
      }
    }
  }
  collection_def {
    key: "while_context"
    value {
      bytes_list {
        value: "\n\024rnn/while/rnn/while/\020 \030\001*\024rnn/while/LoopCond:02\021rnn/while/Merge:0:\024rnn/while/Identity:0B\020rnn/while/Exit:0B\022rnn/while/Exit_1:0B\022rnn/while/Exit_2:0B\025gradients/f_count_2:0J\2745\n\021gradients/Add/y:0\n\017gradients/Add:0\n\021gradients/Merge:0\n\021gradients/Merge:1\n\031gradients/NextIteration:0\n\022gradients/Switch:0\n\022gradients/Switch:1\n\023gradients/f_count:0\n\025gradients/f_count_1:0\n\025gradients/f_count_2:0\nxgradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/Tanh_grad/TanhGrad/RefEnter:0\nygradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/Tanh_grad/TanhGrad/StackPush:0\nugradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/Tanh_grad/TanhGrad/f_acc:0\n\211\001gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul_grad/MatMul_1/RefEnter:0\n\212\001gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul_grad/MatMul_1/StackPush:0\n\206\001gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul_grad/MatMul_1/f_acc:0\n}gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/Shape:0\n\207\001gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ShapeN/RefEnter:0\n\211\001gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ShapeN/RefEnter_1:0\n\210\001gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ShapeN/StackPush:0\n\212\001gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ShapeN/StackPush_1:0\n\204\001gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ShapeN/f_acc:0\n\206\001gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ShapeN/f_acc_1:0\n\204\001gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/mod/RefEnter:0\n\205\001gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/mod/StackPush:0\n\201\001gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/mod/f_acc:0\n\021rnn/TensorArray:0\n@rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3:0\n\023rnn/TensorArray_1:0\n8rnn/output_projection_wrapper/basic_rnn_cell/bias/read:0\n:rnn/output_projection_wrapper/basic_rnn_cell/kernel/read:0\n)rnn/output_projection_wrapper/bias/read:0\n+rnn/output_projection_wrapper/kernel/read:0\n\025rnn/strided_slice_1:0\n\021rnn/while/Enter:0\n\023rnn/while/Enter_1:0\n\023rnn/while/Enter_2:0\n\020rnn/while/Exit:0\n\022rnn/while/Exit_1:0\n\022rnn/while/Exit_2:0\n\024rnn/while/Identity:0\n\026rnn/while/Identity_1:0\n\026rnn/while/Identity_2:0\n\026rnn/while/Less/Enter:0\n\020rnn/while/Less:0\n\024rnn/while/LoopCond:0\n\021rnn/while/Merge:0\n\021rnn/while/Merge:1\n\023rnn/while/Merge_1:0\n\023rnn/while/Merge_1:1\n\023rnn/while/Merge_2:0\n\023rnn/while/Merge_2:1\n\031rnn/while/NextIteration:0\n\033rnn/while/NextIteration_1:0\n\033rnn/while/NextIteration_2:0\n\022rnn/while/Switch:0\n\022rnn/while/Switch:1\n\024rnn/while/Switch_1:0\n\024rnn/while/Switch_1:1\n\024rnn/while/Switch_2:0\n\024rnn/while/Switch_2:1\n#rnn/while/TensorArrayReadV3/Enter:0\n%rnn/while/TensorArrayReadV3/Enter_1:0\n\035rnn/while/TensorArrayReadV3:0\n5rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter:0\n/rnn/while/TensorArrayWrite/TensorArrayWriteV3:0\n\021rnn/while/add/y:0\n\017rnn/while/add:0\nWrnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/Tanh:0\nornn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/BiasAdd/Enter:0\nirnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/BiasAdd:0\nnrnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul/Enter:0\nhrnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul:0\nmrnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat/axis:0\nhrnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat:0\nSrnn/while/rnn/output_projection_wrapper/output_projection_wrapper_1/BiasAdd/Enter:0\nMrnn/while/rnn/output_projection_wrapper/output_projection_wrapper_1/BiasAdd:0\nRrnn/while/rnn/output_projection_wrapper/output_projection_wrapper_1/MatMul/Enter:0\nLrnn/while/rnn/output_projection_wrapper/output_projection_wrapper_1/MatMul:0\022\225\002\n\206\001gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ShapeN/f_acc_1:0\022\211\001gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ShapeN/RefEnter_1:0\022J\n\021rnn/TensorArray:0\0225rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter:0\022\221\002\n\204\001gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ShapeN/f_acc:0\022\207\001gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/ShapeN/RefEnter:0\022/\n\025rnn/strided_slice_1:0\022\026rnn/while/Less/Enter:0\022\254\001\n:rnn/output_projection_wrapper/basic_rnn_cell/kernel/read:0\022nrnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul/Enter:0\022\200\001\n)rnn/output_projection_wrapper/bias/read:0\022Srnn/while/rnn/output_projection_wrapper/output_projection_wrapper_1/BiasAdd/Enter:0\022:\n\023rnn/TensorArray_1:0\022#rnn/while/TensorArrayReadV3/Enter:0\022\213\002\n\201\001gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/mod/f_acc:0\022\204\001gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/concat_grad/mod/RefEnter:0\022\201\001\n+rnn/output_projection_wrapper/kernel/read:0\022Rrnn/while/rnn/output_projection_wrapper/output_projection_wrapper_1/MatMul/Enter:0\022\253\001\n8rnn/output_projection_wrapper/basic_rnn_cell/bias/read:0\022ornn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/BiasAdd/Enter:0\022i\n@rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3:0\022%rnn/while/TensorArrayReadV3/Enter_1:0\022\361\001\nugradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/Tanh_grad/TanhGrad/f_acc:0\022xgradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/Tanh_grad/TanhGrad/RefEnter:0\022\225\002\n\206\001gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul_grad/MatMul_1/f_acc:0\022\211\001gradients/rnn/while/rnn/output_projection_wrapper/output_projection_wrapper/basic_rnn_cell/basic_rnn_cell/MatMul_grad/MatMul_1/RefEnter:0R\021rnn/while/Enter:0R\023rnn/while/Enter_1:0R\023rnn/while/Enter_2:0R\025gradients/f_count_1:0"
      }
    }
  }
}
